1. What differences exist between pointer variables and arrays

    - A pointer is fixed in size and location. A pointer keeps the adress of a place, but this can 
	  be changed, which allows the pointer to change in size. 
    - If a pointer is given to a function, then elements of the thing the pointer is pointing to 
	  might be changed during the function. This will remain so after the function has ended.
      If an array is given to a function, then the elements of this array might be changed during 
	  the function, but afterwards this whole array is thrown away, and this the changed won't 
	  remain (unless they are returned by the function). 
	  
2. What differences exist between pointer variables and reference variables.

    - The point a pointer variable points to can be changed, but this is not possible for a 
	  reference variable.
	- There exists a NULL-pointer, but a reference always has to refer to something.
    - If a pointer is given to a function, then elements of the thing the pointer is pointing to 
	  might be changed during the function. This will remain so after the function has ended.
      If a reference is given to a function, then the elements of this reference might be changed 
	  during the function, but afterwards this whole reference is thrown away, and this the changed 
	  won't remain (unless they are returned by the function). 
	  
3. How element [3][2] is reached (maybe make a drawing?)

       a: for the variable `int array[20][30]'
	   
		  The element [3][2] is reached by first going to the third array within int array[20][30], 
		  and then go to the fourth element within this array.
		  
       b: for the variable `int *pointer[20]'
	   
	    The element [3][2] is directly reached, as we are pointed directly towards this element by
		  the pointer.

Also, make clear in a drawing or diagram how the memory accessed by array and pointer is organized.

(Will come in ShareLaTeX)

4. What is meant by `pointer arithmetic'

   Pointer arithmetic are the possible arithmetic actions you can do like adding or comparing 
   pointers. 

5. Explain why accessing an element in an array using only a pointer variable is to be preferred 
   over using an index expression. By implication: why are repetitions iterating over a series of 
   elements using a pointer-type loop control variable preferred over repetitions in which the loop 
   control variable is, e.g., a size_t type variable? 
   
   Can anybody give a good explanation for this?
