main.cc
\underline{matrix/matrix.h}
\begin{verbatim}
#ifndef INCLUDED_MATRIX_
#define INCLUDED_MATRIX_

#include <initializer_list>
#include <cstdlib>              // size_t

class Matrix
{
private:
    double *d_data;
    std::size_t d_nRows = 0;
    std::size_t d_nCols = 0;

public:
    Matrix();
    Matrix(std::size_t rows, std::size_t cols);
    ~Matrix();
    Matrix(std::initializer_list<std::initializer_list<double>> iList);
    size_t nRows() const;
    size_t nCols() const;
    double *row(size_t idx);
    double *row(size_t idx) const;

private:
};

#endif\end{verbatim}


\underline{matrix/matrix.ih}
\begin{verbatim}
#include "matrix.h"
#include <cstring>
#include <utility>
#include <iostream>

using namespace std;

\end{verbatim}


\underline{main.cc}
\begin{verbatim}
#include <iostream>
#include "matrix/matrix.h"

using namespace std;

int main() {
    Matrix mat({{1.0, 2.0, 3.0}, {10.0, 20.0, 30.0}, {100.0, 200.0, 300.0}, {1000.0, 2000.0, 3000.0}});
    for (size_t row = 0; row < mat.nRows(); ++row) {
        for (double *el = mat.row(row); el != mat.row(row) + mat.nCols(); ++ el)
            cout << *el << ' ';
        cout << '\n';
    }


}\end{verbatim}


\underline{matrix/destructor.cc}
\begin{verbatim}
#include "matrix.ih"

Matrix::~Matrix(){
    delete[] d_data;
}\end{verbatim}


\underline{matrix/matrix1.cc}
\begin{verbatim}
#include "matrix.ih"

Matrix::Matrix()
//:
{
}
\end{verbatim}


\underline{matrix/matrix2.cc}
\begin{verbatim}
#include "matrix.ih"

typedef initializer_list<double> const il;

Matrix::Matrix(initializer_list<initializer_list<double> > iList)
{
    d_nRows = iList.size();
    il *iRows = iList.begin();
    d_nCols = iRows->size();
    d_data = new double[d_nCols * d_nRows];
    double *dataPtr = d_data;

    for (il *rowItr = iRows; rowItr != iRows + d_nRows; ++rowItr)
        if (rowItr->size() == d_nCols)
            for (double const *colItr = &*rowItr->begin();
                    colItr != rowItr->begin() + d_nCols; )
                *dataPtr++ = *colItr++;
        else {
            cout <<
                 "Rows in initializer list have different sizes"
                 << '\n';
            exit(1);
        }
}
\end{verbatim}


\underline{matrix/matrix4.cc}
\begin{verbatim}
#include "matrix.ih"

Matrix::Matrix(size_t rows, size_t cols)
//:
{
    d_nRows = rows;
    d_nCols = cols;
    d_data = new double[d_nRows * d_nCols];
}
\end{verbatim}


\underline{matrix/ncols.cc}
\begin{verbatim}
#include "matrix.ih"

size_t Matrix::nCols() {
    return d_nCols;
}\end{verbatim}


\underline{matrix/nrows.cc}
\begin{verbatim}
#include "matrix.ih"

size_t Matrix::nRows() {
    return d_nRows;
}\end{verbatim}


\underline{matrix/row.cc}
\begin{verbatim}
#include "matrix.ih"

double *Matrix::row(size_t idx){
    return d_data + idx * d_nCols;
}

double *Matrix::row(size_t idx) const{
    return d_data + idx * d_nCols;
}\end{verbatim}


